[
  {
    "path": "lecciones_R/2023-11-29-manipulación-de-datos-con-dplyr/",
    "title": "Manipulación de datos con dplyr",
    "description": "En esta publicación se aborda un aspecto sumamente importante de la ciencia de datos, como lo es la manipulación de tablas de datos como paso inicial en el proceso de obtención de información.",
    "author": [
      {
        "name": "Félix Millán",
        "url": {}
      }
    ],
    "date": "2023-11-29",
    "categories": [
      "Tablas de datos",
      "Manipulación de datos",
      "Tidyverse"
    ],
    "contents": "\n\nContents\nIntroducción\nPrincipales funciones de dplyr\nSelect\nFilter\nSlice\nMutate\nArrange\nGroup_by y summarise\n\n\n\nIntroducción\nUn atributo notable del lenguaje de programación R, es poder disponer del gran volumen de bibliotecas especializadas en distintos aspectos del análisis de datos. En tal sentido, existe un conjunto de bibliotecas conocidas como el Tidyverse, sumamente útiles para la manipulación, visualización y modelado de datos. En esta publicación, veremos las principlaes funciones de importancia de una de las principales bibliotecas: dplyr.\n\n\n\nDebemos primero instalar la biblioteca y luego llamarla, escribiendo el siguiente código en la consola de R:\ninstall.packages(“dplyr”)\nlibrary(dplyr)\nY ahora sí, estamos listos para explorar las principales funciones de esta biblioteca.\nPrincipales funciones de dplyr\nA fin de trabajar con las principales funciones de la biblioteca, utilizaremos una biblioteca de datos sobre vuelos aéreos de la ciudad de Nueva York -entre muchas-, que viene incluida con la instalación de R. Para llamar la base de datos antes mencionada, escribimos:\nlibrary(nycflights13)\nEn caso de no venir instalada por defecto, la debemos instalar al igual que se hizo con dplyr.\n\n\n\nLa biblioteca nycflights13 está conformada por cinco tablas de datos: airlines, airports, flights, planes y weather. Observemos los primeros datos de la tabla planes con la función head.\n\n\nhead(planes)\n\n# A tibble: 6 × 9\n  tailnum  year type          manuf…¹ model engines seats speed engine\n  <chr>   <int> <chr>         <chr>   <chr>   <int> <int> <int> <chr> \n1 N10156   2004 Fixed wing m… EMBRAER EMB-…       2    55    NA Turbo…\n2 N102UW   1998 Fixed wing m… AIRBUS… A320…       2   182    NA Turbo…\n3 N103US   1999 Fixed wing m… AIRBUS… A320…       2   182    NA Turbo…\n4 N104UW   1999 Fixed wing m… AIRBUS… A320…       2   182    NA Turbo…\n5 N10575   2002 Fixed wing m… EMBRAER EMB-…       2    55    NA Turbo…\n6 N105UW   1999 Fixed wing m… AIRBUS… A320…       2   182    NA Turbo…\n# … with abbreviated variable name ¹​manufacturer\n\nEsta función nos permite visualizar los primeros 6 datos de un total de 9 columnas que componen la tabla. Si se quiere obtener una información más detallada de las variables y número de observaciones que componen la tabla, podemos utilizar la función str:\n\n\nstr(planes)\n\ntibble [3,322 × 9] (S3: tbl_df/tbl/data.frame)\n $ tailnum     : chr [1:3322] \"N10156\" \"N102UW\" \"N103US\" \"N104UW\" ...\n $ year        : int [1:3322] 2004 1998 1999 1999 2002 1999 1999 1999 1999 1999 ...\n $ type        : chr [1:3322] \"Fixed wing multi engine\" \"Fixed wing multi engine\" \"Fixed wing multi engine\" \"Fixed wing multi engine\" ...\n $ manufacturer: chr [1:3322] \"EMBRAER\" \"AIRBUS INDUSTRIE\" \"AIRBUS INDUSTRIE\" \"AIRBUS INDUSTRIE\" ...\n $ model       : chr [1:3322] \"EMB-145XR\" \"A320-214\" \"A320-214\" \"A320-214\" ...\n $ engines     : int [1:3322] 2 2 2 2 2 2 2 2 2 2 ...\n $ seats       : int [1:3322] 55 182 182 182 55 182 182 182 182 182 ...\n $ speed       : int [1:3322] NA NA NA NA NA NA NA NA NA NA ...\n $ engine      : chr [1:3322] \"Turbo-fan\" \"Turbo-fan\" \"Turbo-fan\" \"Turbo-fan\" ...\n\nVemos al inicio que la tabla planes está conformada por 3322 observaciones (filas), en relación a 9 variables (columnas), entre las que tenemos: ID del ala trasera (tailnum), año, tipo de motor, fabricante, modelo, motores, asientos y velocidad. Esta primera visualización también nos aporta información sobre el tipo de variables. Por ejemplo, el ID del ala trasera es una variable caracter, en tanto que el numero de asientos es una variable numérica.\nSelect\nEsta función permite seleccionar variables específicas de una tabla de datos. Supongamos que a partir de la tabla original, queremos formar una nueva tabla con las variables: tailnum, manufacturer y seats\n\n\nselect(planes, tailnum, manufacturer, seats)\n\n# A tibble: 3,322 × 3\n   tailnum manufacturer     seats\n   <chr>   <chr>            <int>\n 1 N10156  EMBRAER             55\n 2 N102UW  AIRBUS INDUSTRIE   182\n 3 N103US  AIRBUS INDUSTRIE   182\n 4 N104UW  AIRBUS INDUSTRIE   182\n 5 N10575  EMBRAER             55\n 6 N105UW  AIRBUS INDUSTRIE   182\n 7 N107US  AIRBUS INDUSTRIE   182\n 8 N108UW  AIRBUS INDUSTRIE   182\n 9 N109UW  AIRBUS INDUSTRIE   182\n10 N110UW  AIRBUS INDUSTRIE   182\n# … with 3,312 more rows\n\nEl código anterior, aunque logró el objetivo, no se corresponde con la gramática utilizada en dplyr; para ello, se utiliza el operador %>%, que se lee entonces y que constituye una especie de tubería (pipe) que garantiza el flujo de código en la gramática de la biblioteca. Reescribiendo el código anterior tenemos:\n\n\naviones <- planes %>%\n  select(tailnum, manufacturer, seats)\nhead(aviones)\n\n# A tibble: 6 × 3\n  tailnum manufacturer     seats\n  <chr>   <chr>            <int>\n1 N10156  EMBRAER             55\n2 N102UW  AIRBUS INDUSTRIE   182\n3 N103US  AIRBUS INDUSTRIE   182\n4 N104UW  AIRBUS INDUSTRIE   182\n5 N10575  EMBRAER             55\n6 N105UW  AIRBUS INDUSTRIE   182\n\nFilter\nLa función filter, permite filtrar las filas de la tabla en base a algún criterio específico. Supongamos que estamos interesados en los datos del fabricante AIRBUS INDUSTRIE:\n\n\nmanufacturer <- aviones %>%\n  filter(manufacturer == \"AIRBUS INDUSTRIE\")\nhead(manufacturer)\n\n# A tibble: 6 × 3\n  tailnum manufacturer     seats\n  <chr>   <chr>            <int>\n1 N102UW  AIRBUS INDUSTRIE   182\n2 N103US  AIRBUS INDUSTRIE   182\n3 N104UW  AIRBUS INDUSTRIE   182\n4 N105UW  AIRBUS INDUSTRIE   182\n5 N107US  AIRBUS INDUSTRIE   182\n6 N108UW  AIRBUS INDUSTRIE   182\n\nSi deseamos filtrar los datos de manera de seleccionar de la tabla original, el número de cola, fabricante y asientos; y específicamente aquellos aviones con más de 200 asientos del fabricante AIRBUS INDUSTRIE tenemos:\n\n\naviones <- planes %>%\n  select(tailnum, manufacturer, seats) %>%\n  filter(manufacturer == \"AIRBUS INDUSTRIE\" & seats > 200)\nhead(aviones)\n\n# A tibble: 4 × 3\n  tailnum manufacturer     seats\n  <chr>   <chr>            <int>\n1 N281AT  AIRBUS INDUSTRIE   375\n2 N572UW  AIRBUS INDUSTRIE   379\n3 N851NW  AIRBUS INDUSTRIE   379\n4 N907JB  AIRBUS INDUSTRIE   379\n\nNoten el uso del caracter & para establecer la condición AND. De igual forma, el caracter | se utiliza para la condición OR. Por ejemplo:\n\n\naviones <- planes %>%\n  select(tailnum, manufacturer, seats) %>%\n  filter(manufacturer == \"AIRBUS INDUSTRIE\" | seats <= 200 )\nhead(aviones)\n\n# A tibble: 6 × 3\n  tailnum manufacturer     seats\n  <chr>   <chr>            <int>\n1 N10156  EMBRAER             55\n2 N102UW  AIRBUS INDUSTRIE   182\n3 N103US  AIRBUS INDUSTRIE   182\n4 N104UW  AIRBUS INDUSTRIE   182\n5 N10575  EMBRAER             55\n6 N105UW  AIRBUS INDUSTRIE   182\n\nObserven que al establecer la condición OR, el código ha incluido al fabricante EMBRAER porque produce aviones con menos de 200 asientos.\nBetween\nEsta función se utiliza en combinación con filter para seleccionar las filas que se encuentren entre dos condiciones límite. Por ejemplo, si queremos seleccionar los aviones que tengan entre 50 y 100 asientos:\n\n\naviones <- planes %>%\n  select(tailnum, manufacturer, seats) %>%\n  filter(between(seats,50,100))\nstr(aviones)\n\ntibble [698 × 3] (S3: tbl_df/tbl/data.frame)\n $ tailnum     : chr [1:698] \"N10156\" \"N10575\" \"N11106\" \"N11107\" ...\n $ manufacturer: chr [1:698] \"EMBRAER\" \"EMBRAER\" \"EMBRAER\" \"EMBRAER\" ...\n $ seats       : int [1:698] 55 55 55 55 55 55 55 55 55 55 ...\n\nObserven que hay 698 aviones que cumplen con la condición establecida.\nSlice\nEsta función devuelve filas específicas de la tabla de datos. Por ejemplo, supongamos que estamos interesados en las dos primeras filas de la tabla original de datos\n\n\naviones <- planes %>%\n  select(tailnum, manufacturer, seats) %>%\n  slice(1,2)\naviones\n\n# A tibble: 2 × 3\n  tailnum manufacturer     seats\n  <chr>   <chr>            <int>\n1 N10156  EMBRAER             55\n2 N102UW  AIRBUS INDUSTRIE   182\n\nMutate\nEsta es una función de gran utilidad, ya que nos permite incorporar nuevas variables o modificar variables existentes en una tabla de datos. Consideremos una tabla con el peso (kg) y talla (m) de cinco personas:\n\n\npeso <- c(65,78,86,75,81)\ntalla <- c(1.70,1.72,1.67,1.80,1.78)\ndatos <- data.frame(peso,talla)\ndatos\n\n  peso talla\n1   65  1.70\n2   78  1.72\n3   86  1.67\n4   75  1.80\n5   81  1.78\n\nSupongamos que queremos incorporar una tercera variable, el índice de masa corporal (IMC):\n\n\ndatos <- datos %>%\n  mutate(IMC = peso/(talla)^2)\ndatos\n\n  peso talla      IMC\n1   65  1.70 22.49135\n2   78  1.72 26.36560\n3   86  1.67 30.83653\n4   75  1.80 23.14815\n5   81  1.78 25.56495\n\nAprovechando la nueva tabla que se ha generado, utilizaremos la función mutate en conjunto con la función if_else de dplyr:\n\n\nresultado <- datos %>%\n  mutate(DX = if_else(IMC > 25,\"sobrepeso\",\"normopeso\"))\nresultado\n\n  peso talla      IMC        DX\n1   65  1.70 22.49135 normopeso\n2   78  1.72 26.36560 sobrepeso\n3   86  1.67 30.83653 sobrepeso\n4   75  1.80 23.14815 normopeso\n5   81  1.78 25.56495 sobrepeso\n\nArrange\nEsta función permite ordenar la tabla de datos en función de una variable. Por ejemplo, apartir de la tabla original, construyamos una tabla con las variables: tailnum, year y model y oredenemos la nueva tabla en función del año\n\n\naviones <- planes %>%\n  select(year, tailnum, model) %>%\n  arrange(year)\nhead(aviones)\n\n# A tibble: 6 × 3\n   year tailnum model      \n  <int> <chr>   <chr>      \n1  1956 N381AA  DC-7BF     \n2  1959 N201AA  150        \n3  1959 N567AA  OTTER DHC-3\n4  1963 N378AA  172E       \n5  1963 N575AA  210-5(205) \n6  1965 N14629  737-524    \n\nY si lo requerimos en orden descendente:\n\n\naviones <- planes %>%\n  select(year, tailnum, model) %>%\n  arrange(desc(year))\nhead(aviones)\n\n# A tibble: 6 × 3\n   year tailnum model   \n  <int> <chr>   <chr>   \n1  2013 N150UW  A321-211\n2  2013 N151UW  A321-211\n3  2013 N152UW  A321-211\n4  2013 N153UW  A321-211\n5  2013 N154UW  A321-211\n6  2013 N155UW  A321-211\n\nGroup_by y summarise\nEstas son, quizá, las funciones más importantes de la biblioteca dplyr, ya que nos permiten ejecutar operaciones en un sub-grupo del data frame sin necesidad de extraer el sub-grupo. A partir de planes, agruparemos los datos por fabricante y calcularemos el promedio de asientos en los aviones de cada uno:\n\n\ndf <- planes %>%\n  group_by(manufacturer) %>%\n  summarise(Media = mean(seats))\nhead(df)\n\n# A tibble: 6 × 2\n  manufacturer           Media\n  <chr>                  <dbl>\n1 AGUSTA SPA                8 \n2 AIRBUS                  221.\n3 AIRBUS INDUSTRIE        187.\n4 AMERICAN AIRCRAFT INC     2 \n5 AVIAT AIRCRAFT INC        2 \n6 AVIONS MARCEL DASSAULT   12 \n\nSi retomamos el dataframe de peso y talla que elaboramos más arriba, añadimos otros datos e incorporamos la variable sexo:\n\n\nsexo <- c(\"Mujer\",\"Hombre\",\"Hombre\",\"Mujer\", \"Mujer\",\"Hombre\",\"Mujer\")\npeso <- c(65,78,86,71,81,90,63.2)\ntalla <- c(1.70,1.72,1.67,1.80,1.78,1.75,1.70)\ndatos <- data.frame(sexo, talla, peso)\ndatos\n\n    sexo talla peso\n1  Mujer  1.70 65.0\n2 Hombre  1.72 78.0\n3 Hombre  1.67 86.0\n4  Mujer  1.80 71.0\n5  Mujer  1.78 81.0\n6 Hombre  1.75 90.0\n7  Mujer  1.70 63.2\n\nPodríamos agrupar los datos por sexo y calcular la media y la mediana en cada grupo:\n\n\ndatos %>%\n  group_by(sexo)%>%\n  summarise(Media = mean(peso), Mediana = median(peso))\n\n# A tibble: 2 × 3\n  sexo   Media Mediana\n  <chr>  <dbl>   <dbl>\n1 Hombre  84.7      86\n2 Mujer   70.0      68\n\nNo son todas, pero sí las funciones de más amplio uso de dplyr.\n\n\nVolver al principio\n\n\n\n\n",
    "preview": "lecciones_R/2023-11-29-manipulación-de-datos-con-dplyr/dplyr.png",
    "last_modified": "2023-11-30T12:16:27-04:00",
    "input_file": {},
    "preview_width": 479,
    "preview_height": 483
  },
  {
    "path": "lecciones_R/2023-07-01-estructuras-de-datos/",
    "title": "Estructuras de datos",
    "description": "Este apartado trata sobre las principales estructuras de datos en R. Se verá como conformar vectores, factores, matrices y tablas de datos. Es un tutorial muy útil para abordar aspectos más avanzados del programa.",
    "author": [
      {
        "name": "Félix Millán",
        "url": {}
      }
    ],
    "date": "2023-07-01",
    "categories": [
      "Tipos de datos",
      "Gráficos"
    ],
    "contents": "\n\nContents\nIntroducción\nVectores\nFactores\nMatrices\nTablas de datos (data frames)\n\n\nIntroducción\nAntes de empezar, lo primero que debemos hacer es instalar el software R. En el enlace anterior, podemos descargar la última versión para nuestro sistema operativo (Linux, Windows o Mac), y luego instalarlo en el computador.\n\n\n\nComo pueden ver en el enlace, R es un programa de estadística computacional y a la vez un proyecto de softwware libre conformado por una gran comunidad a nivel mundial. Sus orígenes se remontan a 1993, cuando dos profesores de la universidad de Auckland: Ross ihaka y Robert Gentleman desarrollaron lo que sería una versión inicial de un software libre análogo al lenguaje S. Actualmente, es uno de lenguajes de programación más utilizados por la comunidad científica mundial, para la visualización, análisis de datos y aprendizaje automático.\n\n\nLuego de instalar el programa, debemos descargar un editor de código o un ambiente de desarrollo integrado (IDE por sus siglas en inglés), lo cual facilita considerablemente el desarrollo de proyectos en R. La IDE más utilizada -y es realmente buena- es Rstudio, la cual pueden descargar e instalar en el siguiente enlace: Rstudio, para el sistema operativo que corresponda.\nAhora sí, veamos las principales estructuras de datos en R:\nVectores\nSe pueden construir vectores numéricos o de caracteres. Para ello, debemos conocer que el signo de igualdad se escribe como <- y que se debe utilizar la función de concatenación c, para indicarle al programa que todos los elementos entre () pertenecen a un mismo objeto. El uso de # se utiliza para introducir comentarios que no forman parte del código:\n\n\nx <- c(3,7,4,3,7,9) # Vector numérico\nx\n\n[1] 3 7 4 3 7 9\n\n# Vector de caracteres\nnames <- c(\"Pedro\", \"Pablo\", \"María\", \"José\", \"Rafael\")\nnames\n\n[1] \"Pedro\"  \"Pablo\"  \"María\"  \"José\"   \"Rafael\"\n\nTambién se puede concatenar dos vectores:\n\n\n# Concatenación de vectores numéricos\na <- c(1,2,3)\nb <- c(4,5)\nc(a,b)\n\n[1] 1 2 3 4 5\n\n# Concatenación de vectores de caracteres\nladies <- c(\"María\", \"Linda\")\ngentlemen <- c(\"Jośe\", \"Félix\")\nc(ladies,gentlemen)\n\n[1] \"María\" \"Linda\" \"Jośe\"  \"Félix\"\n\nDado un vector cualquiera, podemos extraer ciertos elementos. En el siguiente ejemplo, se extraerá el primer y segundo elemneto del vector. Esa es la función del signo negativo en el siguiente código:\n\n\ny <- c(1,2,3,4,5,6)\ny[-c(1,2)]\n\n[1] 3 4 5 6\n\nTambién podríamos almacenar el resultado anterior en un nuevo objeto para su uso posterior:\n\n\ny <- c(1,2,3,4,5,6)\nm <- y[-c(1,2)]\nm\n\n[1] 3 4 5 6\n\nSi se estrae un solo elemento, supongamos, el primero; escribimos simplemente:\n\n\ny[-1]\n\n[1] 2 3 4 5 6\n\nTambién se pueden crear vectores a partir de variables. Supongamos tres variables: x, y, z. Podemos crear un vector b que sea la combinación de las variables anteriores:\n\n\nx <- c(1,2,3)\ny <- c(4,5,6)\nz <- c(7,8,9,10)\nb <- c(x,y,z)\nb\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nTambién se pueden crear vectores que respondan a un patrón con las funciones seq y rep\n\n\nx <- seq(1:10)\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ny <- seq(1,5,0.5)\ny\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\nNótese que en el segundo ejemplo se especificó la secuencia de números del 1 al 5 a intervalos de 0.5. veamos ahora el uso de la función rep:\n\n\nrep(7,3)\n\n[1] 7 7 7\n\nrep(3:4,2)\n\n[1] 3 4 3 4\n\nrep(1:3,c(1,2,3))\n\n[1] 1 2 2 3 3 3\n\nSe lee:\nRepite el 7 tres veces\nRepite la secuencia del 3 al 4, dos veces\nRepite el 1, una vez, el 2, dos veces y el 3, tres veces\nEn los vectores también pueden existir valores faltantes NA (*not available), en cuyo caso, podemos estar interesados en identificarlos o removerlos. Veamos algunos ejemplos:\n\n\nx <- c(1,2,3,NA,4,5)\nx\n\n[1]  1  2  3 NA  4  5\n\n# Identificación de valores faltantes\nis.na(x)\n\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n\n# Selección de los valores no faltantes\nx1 <- x[!is.na(x)]\nx1\n\n[1] 1 2 3 4 5\n\nNótese que en el último código se removieron los valores no disponibles del vector x y la información se almacenó en un nuevo vector llamado x1.\nCon los vectores también podemos efectuar operaciones aritméticas\n\n\na <- c(1,2,3)\nb <- c(4,5,6)\n# Suma\na+b\n\n[1] 5 7 9\n\n# Resta\na-b\n\n[1] -3 -3 -3\n\n# multiplicación\na*b\n\n[1]  4 10 18\n\n# División\na/b\n\n[1] 0.25 0.40 0.50\n\n# Potenciación\nb^2\n\n[1] 16 25 36\n\nb**2\n\n[1] 16 25 36\n\nidentical(b^2,b**2)\n\n[1] TRUE\n\nObserven el la última línea que la potencia de un número puede escribirse como b^2 o como b**2\nLa definición de vectores permite la construcción de gráficos básicos con la función plot, la cual tiene varios argumentos. En el siguiente ejemplo solo utilizaremos los argumentos; main, xlab, ylab, type y col.\n\n\nx <- seq(-pi,pi,0.1)\ny <- sin(x)\nplot(y~x, xlab = \"X\", ylab = \"Seno de X\", \n     main= \"Gráfico a partir de vectores\",\n     type = \"o\", col = \"darkblue\")\n\n\n\nFactores\nLos factores son estructuras que se utilizan para realizar una clasificación discreta de otros vectores de la misma longitud. Supongamos que se le pregunta a 10 personas que asisten a un evento, su país de origen. Esta información pudiera guardarse como un vector de la siguiente manera:\n\n\npais.origen <- c(\"Argentina\",\"Perú\",\"Venezuela\",\"Japón\",\"Perú\",\n                 \"Argentina\",\"Japón\",\"Venezuela\",\"Benín\",\n                 \"México\")\npais.origen\n\n [1] \"Argentina\" \"Perú\"      \"Venezuela\" \"Japón\"     \"Perú\"     \n [6] \"Argentina\" \"Japón\"     \"Venezuela\" \"Benín\"     \"México\"   \n\nEl mismo vector, guardado como factor:\n\n\npais.origen <- as.factor(pais.origen)\npais.origen\n\n [1] Argentina Perú      Venezuela Japón     Perú      Argentina\n [7] Japón     Venezuela Benín     México   \nLevels: Argentina Benín Japón México Perú Venezuela\n\n# Sus niveles o categorías\nlevels(pais.origen)\n\n[1] \"Argentina\" \"Benín\"     \"Japón\"     \"México\"    \"Perú\"     \n[6] \"Venezuela\"\n\n# El resumen de cada categoría\nsummary(pais.origen)\n\nArgentina     Benín     Japón    México      Perú Venezuela \n        2         1         2         1         2         2 \n\nEste tipo de estructura es muy útil cuando se trabaja con diseño de experimentos, por ejemplo. El factor también puede estar ordenado, en cuyo caso se utiliza la función ordered. Un ejemplo:\n\n\ntratamientos <- factor(c(1,3,4,2,1,4,2,2,1,1,1,3,3,4))\ntratamientos <- ordered(tratamientos)\ntratamientos\n\n [1] 1 3 4 2 1 4 2 2 1 1 1 3 3 4\nLevels: 1 < 2 < 3 < 4\n\nMatrices\nPara la construcción de matrices en R, se utilizan las funciones ncol, nrow, matrix y byrow. Lo primero que se debe hacer es crear el vector de datos que conformarán la matriz. Supongamos que se desea construir una matriz 3x3 con los siguientes datos: \\(1,2,3,4,5,6,7,8,9\\)\n\n\ndata <- c(1,2,3,4,5,6,7,8,9)\n# Matriz 1\nM1 <- matrix(data, ncol = 3, byrow = TRUE)\nM1\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n# Matriz 2\nM2 <- matrix(data,ncol = 3,byrow = FALSE)\nM2\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n# Matriz 3\ndata <- c(1,2,3,4,5,6)\nM3 <- matrix(data,nrow = 3,byrow = TRUE)\nM3\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\nA partir de las matrices que se han construido, se puede calcular la matriz traspuesta y la matriz inversa, con las funciones t y solve respectivamente, de gran utilidad en el cálculo de predictores \\(\\beta_i\\) en modelos matemáticos:\n\\[\n\\beta_i=(X'X)^{-1}X'Y\n\\]\nUn ejemplo de matriz traspuesta:\n\n\n# Matriz traspuesta de M1\ntraspuesta.M1 <- t(M1)\ntraspuesta.M1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nUn ejemplo de matriz inversa:\n\n\ndata <- c(6,4,3,5,1,3,5,7,8,2,3,5,4,6,2,7)\nmatriz <- matrix(data,nrow = 4,byrow = TRUE)\nmatriz\n\n     [,1] [,2] [,3] [,4]\n[1,]    6    4    3    5\n[2,]    1    3    5    7\n[3,]    8    2    3    5\n[4,]    4    6    2    7\n\n # Matriz inversa\nmatriz.inversa <- solve(matriz)\nmatriz.inversa\n\n            [,1]        [,2]       [,3]        [,4]\n[1,]  0.05952381 -0.08730159  0.1071429 -0.03174603\n[2,]  0.55952381 -0.08730159 -0.3928571 -0.03174603\n[3,]  0.61904762  0.15873016 -0.2857143 -0.39682540\n[4,] -0.69047619  0.07936508  0.3571429  0.30158730\n\nA partir de una matriz, se pueden desarrollar las operaciones aritméticas fundamentales. Caso especial es la multiplicación, ya que si se desea multiplicar una matriz A por un escalar, se escribe \\(escalar*A\\), en tanto que si se desea realizar una multiplicación matricial, la notación utilizada es %*%:\n\n\nA <- matrix(data = c(1,2,3,4), nrow = 2, byrow = TRUE)\nA\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\nB <- matrix(data = c(1,2,3,4), nrow = 2, byrow = FALSE)\nB\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n# Multiplicación matricial\n\nC <- A%*%B\nC\n\n     [,1] [,2]\n[1,]    5   11\n[2,]   11   25\n\nTablas de datos (data frames)\nLos dataframes son una generalización del concepto de matriz. La regla de oro de los data frames es que las variables están dispuestas en columnas y las observaciones en filas. A su vez, las columnas pueden ser distintas estructuras de datos: vectores (numéricos o de caracteres) y factores, pero todos los datos contenidos en una misma columna, deben ser del mismo tipo. veamos con un ejemplo:\n\n\nestudiantes <- c(\"María\",\"Juan\",\"Carlos\",\"Rafael\",\"Emilia\",\n                 \"Ana\",\"Francisco\",\"Vanessa\")\nsexo <- factor(c(\"F\",\"M\",\"M\",\"M\",\"F\",\"F\",\"M\",\"F\"))\ntalla <- c(1.55,1.60,1.70,1.65,1.53,1.58,1.72,1.64)\ndatos <- data.frame(estudiantes, sexo,talla)\ndatos\n\n  estudiantes sexo talla\n1       María    F  1.55\n2        Juan    M  1.60\n3      Carlos    M  1.70\n4      Rafael    M  1.65\n5      Emilia    F  1.53\n6         Ana    F  1.58\n7   Francisco    M  1.72\n8     Vanessa    F  1.64\n\nSi por ejemplo se desea conocer la talla promedio y la desviación estándar de todos los estudiantes, se podría utilizar las funciones mean y sd:\n\n\n# Promedio de la talla\nmean(datos[,3])\n\n[1] 1.62125\n\n# Desviación estándar de la talla\nsd(datos[,3])\n\n[1] 0.06833479\n\nLa notación datos[,3] significa que del data frame datos, se está considerando para el cálculo todas las filas de la columna 3 exclusivamente.\nSin embargo, casi siempre interesa conocer la información contenida en sub.grupos que integran el data frame, como por ejemplo la talla promedio de los hombres y de las mujeres del grupo. Para ello, es muy útil el uso de la función tapply:\n\n\n# Uso de tapply\n\ntapply(datos$talla,datos$sexo,mean)\n\n     F      M \n1.5750 1.6675 \n\nEn un próximo tutorial trataremos la biblioteca dplyr, la cual permite explorar todas las posibilidades de manipulación de un data frame.\n\n\nVolver al principio\n\n\n\n\n",
    "preview": "lecciones_R/2023-07-01-estructuras-de-datos/Rlogo.png",
    "last_modified": "2023-11-27T13:18:30-04:00",
    "input_file": {},
    "preview_width": 724,
    "preview_height": 561
  }
]
