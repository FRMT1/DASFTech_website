[
  {
    "path": "lecciones_R/2023-07-01-estructuras-de-datos/",
    "title": "Estructuras de datos",
    "description": "Principales estructuras de datos en R.",
    "author": [
      {
        "name": "Félix Millán",
        "url": {}
      }
    ],
    "date": "2023-07-01",
    "categories": [],
    "contents": "\nIntroducción\nAntes de empezar, lo primero que debemos hacer es instalar el software R. En el enlace anterior, podemos descargar la última versión para nuestro sistema operativo (Linux, Windows o Mac), y luego instalarlo en el computador. Como pueden ver en el enlace, R es un programa de estadística computacional y a la vez un proyecto de softwware libre conformado por una gran comunidad a nivel mundial. Sus orígenes se remontan a 1993, cuando dos profesores de la universidad de Auckland: Ross ihaka y Robert Gentleman desarrollaron lo que sería una versión inicial de un software libre análogo al lenguaje S. Actualmente, es uno de lenguajes de programación más utilizados por la comunidad científica mundial, para la visualización, análisis de datos y aprendizaje automático.\nLuego de instalar el programa, debemos descargar un editor de código o un ambiente de desarrollo integrado (IDE por sus siglas en inglés), lo cual facilita considerablemente el desarrollo de proyectos en R. La IDE más utilizada -y es realmente buena- es Rstudio, la cual pueden descargar e instalar en el siguiente enlace: Rstudio, para el sistema operativo que corresponda.\nAhora sí, veamos las principales estructuras de datos en R:\nVectores\nSe pueden construir vectores numéricos o de caracteres. Para ello, debemos conocer que el signo de igualdad se escribe como <- y que se debe utilizar la función de concatenación c, para indicarle al programa que todos los elementos entre () pertenecen a un mismo objeto. El uso de # se utiliza para introducir comentarios que no forman parte del código:\n\n\nx <- c(3,7,4,3,7,9) # Vector numérico\nx\n\n[1] 3 7 4 3 7 9\n\n# Vector de caracteres\nnames <- c(\"Pedro\", \"Pablo\", \"María\", \"José\", \"Rafael\")\nnames\n\n[1] \"Pedro\"  \"Pablo\"  \"María\"  \"José\"   \"Rafael\"\n\nTambién se puede concatenar dos vectores:\n\n\n# Concatenación de vectores numéricos\na <- c(1,2,3)\nb <- c(4,5)\nc(a,b)\n\n[1] 1 2 3 4 5\n\n# Concatenación de vectores de caracteres\nladies <- c(\"María\", \"Linda\")\ngentlemen <- c(\"Jośe\", \"Félix\")\nc(ladies,gentlemen)\n\n[1] \"María\" \"Linda\" \"Jośe\"  \"Félix\"\n\nDado un vector cualquiera, podemos extraer ciertos elementos. En el siguiente ejemplo, se extraerá el primer y segundo elemneto del vector. Esa es la función del signo negativo en el siguiente código:\n\n\ny <- c(1,2,3,4,5,6)\ny[-c(1,2)]\n\n[1] 3 4 5 6\n\nTambién podríamos almacenar el resultado anterior en un nuevo objeto para su uso posterior:\n\n\ny <- c(1,2,3,4,5,6)\nm <- y[-c(1,2)]\nm\n\n[1] 3 4 5 6\n\nSi se estrae un solo elemento, supongamos, el primero; escribimos simplemente:\n\n\ny[-1]\n\n[1] 2 3 4 5 6\n\nTambién se pueden crear vectores a partir de variables. Supongamos tres variables: x, y, z. Podemos crear un vector b que sea la combinación de las variables anteriores:\n\n\nx <- c(1,2,3)\ny <- c(4,5,6)\nz <- c(7,8,9,10)\nb <- c(x,y,z)\nb\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nTambién se pueden crear vectores que respondan a un patrón con las funciones seq y rep\n\n\nx <- seq(1:10)\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ny <- seq(1,5,0.5)\ny\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\nNótese que en el segundo ejemplo se especificó la secuencia de números del 1 al 5 a intervalos de 0.5. veamos ahora el uso de la función rep:\n\n\nrep(7,3)\n\n[1] 7 7 7\n\nrep(3:4,2)\n\n[1] 3 4 3 4\n\nrep(1:3,c(1,2,3))\n\n[1] 1 2 2 3 3 3\n\nSe lee:\nRepite el 7 tres veces\nRepite la secuencia del 3 al 4, dos veces\nRepite el 1, una vez, el 2, dos veces y el 3, tres veces\nEn los vectores también pueden existir valores faltantes NA (*not available), en cuyo caso, podemos estar interesados en identificarlos o removerlos. Veamos algunos ejemplos:\n\n\nx <- c(1,2,3,NA,4,5)\nx\n\n[1]  1  2  3 NA  4  5\n\n# Identificación de valores faltantes\nis.na(x)\n\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n\n# Selección de los valores no faltantes\nx1 <- x[!is.na(x)]\nx1\n\n[1] 1 2 3 4 5\n\nNótese que en el último código se removieron los valores no disponibles del vector x y la información se almacenó en un nuevo vector llamado x1.\nCon los vectores también podemos efectuar operaciones aritméticas\n\n\na <- c(1,2,3)\nb <- c(4,5,6)\n# Suma\na+b\n\n[1] 5 7 9\n\n# Resta\na-b\n\n[1] -3 -3 -3\n\n# multiplicación\na*b\n\n[1]  4 10 18\n\n# División\na/b\n\n[1] 0.25 0.40 0.50\n\n# Potenciación\nb^2\n\n[1] 16 25 36\n\nb**2\n\n[1] 16 25 36\n\nidentical(b^2,b**2)\n\n[1] TRUE\n\nObserven el la última línea que la potencia de un número puede escribirse como b^2 o como b2**\n\n\n\n",
    "preview": {},
    "last_modified": "2023-07-01T12:28:45-04:00",
    "input_file": {}
  }
]
