[
  {
    "path": "lecciones_R/2023-07-01-estructuras-de-datos/",
    "title": "Estructuras de datos",
    "description": "Este apartado trata sobre las principales estructuras de datos en R. Se verá como conformar vectores, factores, matrices y tablas de datos. Es un tutorial muy útil para abordar aspectos más avanzados del programa.",
    "author": [
      {
        "name": "Félix Millán",
        "url": {}
      }
    ],
    "date": "2023-07-01",
    "categories": [],
    "contents": "\nIntroducción\nAntes de empezar, lo primero que debemos hacer es instalar el software R. En el enlace anterior, podemos descargar la última versión para nuestro sistema operativo (Linux, Windows o Mac), y luego instalarlo en el computador. Como pueden ver en el enlace, R es un programa de estadística computacional y a la vez un proyecto de softwware libre conformado por una gran comunidad a nivel mundial. Sus orígenes se remontan a 1993, cuando dos profesores de la universidad de Auckland: Ross ihaka y Robert Gentleman desarrollaron lo que sería una versión inicial de un software libre análogo al lenguaje S. Actualmente, es uno de lenguajes de programación más utilizados por la comunidad científica mundial, para la visualización, análisis de datos y aprendizaje automático.\nLuego de instalar el programa, debemos descargar un editor de código o un ambiente de desarrollo integrado (IDE por sus siglas en inglés), lo cual facilita considerablemente el desarrollo de proyectos en R. La IDE más utilizada -y es realmente buena- es Rstudio, la cual pueden descargar e instalar en el siguiente enlace: Rstudio, para el sistema operativo que corresponda.\nAhora sí, veamos las principales estructuras de datos en R:\nVectores\nSe pueden construir vectores numéricos o de caracteres. Para ello, debemos conocer que el signo de igualdad se escribe como <- y que se debe utilizar la función de concatenación c, para indicarle al programa que todos los elementos entre () pertenecen a un mismo objeto. El uso de # se utiliza para introducir comentarios que no forman parte del código:\n\n\nx <- c(3,7,4,3,7,9) # Vector numérico\nx\n\n[1] 3 7 4 3 7 9\n\n# Vector de caracteres\nnames <- c(\"Pedro\", \"Pablo\", \"María\", \"José\", \"Rafael\")\nnames\n\n[1] \"Pedro\"  \"Pablo\"  \"María\"  \"José\"   \"Rafael\"\n\nTambién se puede concatenar dos vectores:\n\n\n# Concatenación de vectores numéricos\na <- c(1,2,3)\nb <- c(4,5)\nc(a,b)\n\n[1] 1 2 3 4 5\n\n# Concatenación de vectores de caracteres\nladies <- c(\"María\", \"Linda\")\ngentlemen <- c(\"Jośe\", \"Félix\")\nc(ladies,gentlemen)\n\n[1] \"María\" \"Linda\" \"Jośe\"  \"Félix\"\n\nDado un vector cualquiera, podemos extraer ciertos elementos. En el siguiente ejemplo, se extraerá el primer y segundo elemneto del vector. Esa es la función del signo negativo en el siguiente código:\n\n\ny <- c(1,2,3,4,5,6)\ny[-c(1,2)]\n\n[1] 3 4 5 6\n\nTambién podríamos almacenar el resultado anterior en un nuevo objeto para su uso posterior:\n\n\ny <- c(1,2,3,4,5,6)\nm <- y[-c(1,2)]\nm\n\n[1] 3 4 5 6\n\nSi se estrae un solo elemento, supongamos, el primero; escribimos simplemente:\n\n\ny[-1]\n\n[1] 2 3 4 5 6\n\nTambién se pueden crear vectores a partir de variables. Supongamos tres variables: x, y, z. Podemos crear un vector b que sea la combinación de las variables anteriores:\n\n\nx <- c(1,2,3)\ny <- c(4,5,6)\nz <- c(7,8,9,10)\nb <- c(x,y,z)\nb\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nTambién se pueden crear vectores que respondan a un patrón con las funciones seq y rep\n\n\nx <- seq(1:10)\nx\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\ny <- seq(1,5,0.5)\ny\n\n[1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0\n\nNótese que en el segundo ejemplo se especificó la secuencia de números del 1 al 5 a intervalos de 0.5. veamos ahora el uso de la función rep:\n\n\nrep(7,3)\n\n[1] 7 7 7\n\nrep(3:4,2)\n\n[1] 3 4 3 4\n\nrep(1:3,c(1,2,3))\n\n[1] 1 2 2 3 3 3\n\nSe lee:\nRepite el 7 tres veces\nRepite la secuencia del 3 al 4, dos veces\nRepite el 1, una vez, el 2, dos veces y el 3, tres veces\nEn los vectores también pueden existir valores faltantes NA (*not available), en cuyo caso, podemos estar interesados en identificarlos o removerlos. Veamos algunos ejemplos:\n\n\nx <- c(1,2,3,NA,4,5)\nx\n\n[1]  1  2  3 NA  4  5\n\n# Identificación de valores faltantes\nis.na(x)\n\n[1] FALSE FALSE FALSE  TRUE FALSE FALSE\n\n# Selección de los valores no faltantes\nx1 <- x[!is.na(x)]\nx1\n\n[1] 1 2 3 4 5\n\nNótese que en el último código se removieron los valores no disponibles del vector x y la información se almacenó en un nuevo vector llamado x1.\nCon los vectores también podemos efectuar operaciones aritméticas\n\n\na <- c(1,2,3)\nb <- c(4,5,6)\n# Suma\na+b\n\n[1] 5 7 9\n\n# Resta\na-b\n\n[1] -3 -3 -3\n\n# multiplicación\na*b\n\n[1]  4 10 18\n\n# División\na/b\n\n[1] 0.25 0.40 0.50\n\n# Potenciación\nb^2\n\n[1] 16 25 36\n\nb**2\n\n[1] 16 25 36\n\nidentical(b^2,b**2)\n\n[1] TRUE\n\nObserven el la última línea que la potencia de un número puede escribirse como b^2 o como b**2\nLa definición de vectores permite la construcción de gráficos básicos con la función plot, la cual tiene varios argumentos. En el siguiente ejemplo solo utilizaremos los argumentos; main, xlab, ylab, type y col.\n\n\nx <- seq(-pi,pi,0.1)\ny <- sin(x)\nplot(y~x, xlab = \"X\", ylab = \"Seno de X\", \n     main= \"Gráfico a partir de vectores\",\n     type = \"o\", col = \"darkblue\")\n\n\n\nFactores\nLos factores son estructuras que se utilizan para realizar una clasificación discreta de otros vectores de la misma longitud. Supongamos que se le pregunta a 10 personas que asisten a un evento, su país de origen. Esta información pudiera guardarse como un vector de la siguiente manera:\n\n\npais.origen <- c(\"Argentina\",\"Perú\",\"Venezuela\",\"Japón\",\"Perú\",\n                 \"Argentina\",\"Japón\",\"Venezuela\",\"Benín\",\n                 \"México\")\npais.origen\n\n [1] \"Argentina\" \"Perú\"      \"Venezuela\" \"Japón\"     \"Perú\"     \n [6] \"Argentina\" \"Japón\"     \"Venezuela\" \"Benín\"     \"México\"   \n\nEl mismo vector, guardado como factor:\n\n\npais.origen <- as.factor(pais.origen)\npais.origen\n\n [1] Argentina Perú      Venezuela Japón     Perú      Argentina\n [7] Japón     Venezuela Benín     México   \nLevels: Argentina Benín Japón México Perú Venezuela\n\n# Sus niveles o categorías\nlevels(pais.origen)\n\n[1] \"Argentina\" \"Benín\"     \"Japón\"     \"México\"    \"Perú\"     \n[6] \"Venezuela\"\n\n# El resumen de cada categoría\nsummary(pais.origen)\n\nArgentina     Benín     Japón    México      Perú Venezuela \n        2         1         2         1         2         2 \n\nEste tipo de estructura es muy útil cuando se trabaja con diseño de experimentos, por ejemplo. El factor también puede estar ordenado, en cuyo caso se utiliza la función ordered. Un ejemplo:\n\n\ntratamientos <- factor(c(1,3,4,2,1,4,2,2,1,1,1,3,3,4))\ntratamientos <- ordered(tratamientos)\ntratamientos\n\n [1] 1 3 4 2 1 4 2 2 1 1 1 3 3 4\nLevels: 1 < 2 < 3 < 4\n\nMatrices\nPara la construcción de matrices en R, se utilizan las funciones ncol, nrow, matrix y byrow. Lo primero que se debe hacer es crear el vector de datos que conformarán la matriz. Supongamos que se desea construir una matriz 3x3 con los siguientes datos: \\(1,2,3,4,5,6,7,8,9\\)\n\n\ndata <- c(1,2,3,4,5,6,7,8,9)\n# Matriz 1\nM1 <- matrix(data, ncol = 3, byrow = TRUE)\nM1\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n# Matriz 2\nM2 <- matrix(data,ncol = 3,byrow = FALSE)\nM2\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n# Matriz 3\ndata <- c(1,2,3,4,5,6)\nM3 <- matrix(data,nrow = 3,byrow = TRUE)\nM3\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n\nA partir de las matrices que se han construido, se puede calcular la matriz traspuesta y la matriz inversa, con las funciones t y solve respectivamente, de gran utilidad en el cálculo de predictores \\(\\beta_i\\) en modelos matemáticos:\n\\[\n\\beta_i=(X'X)^{-1}X'Y\n\\]\nUn ejemplo de matriz traspuesta:\n\n\n# Matriz traspuesta de M1\ntraspuesta.M1 <- t(M1)\ntraspuesta.M1\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\nUn ejemplo de matriz inversa:\n\n\ndata <- c(6,4,3,5,1,3,5,7,8,2,3,5,4,6,2,7)\nmatriz <- matrix(data,nrow = 4,byrow = TRUE)\nmatriz\n\n     [,1] [,2] [,3] [,4]\n[1,]    6    4    3    5\n[2,]    1    3    5    7\n[3,]    8    2    3    5\n[4,]    4    6    2    7\n\n # Matriz inversa\nmatriz.inversa <- solve(matriz)\nmatriz.inversa\n\n            [,1]        [,2]       [,3]        [,4]\n[1,]  0.05952381 -0.08730159  0.1071429 -0.03174603\n[2,]  0.55952381 -0.08730159 -0.3928571 -0.03174603\n[3,]  0.61904762  0.15873016 -0.2857143 -0.39682540\n[4,] -0.69047619  0.07936508  0.3571429  0.30158730\n\nA partir de una matriz, se pueden desarrollar las operaciones aritméticas fundamentales. Caso especial es la multiplicación, ya que si se desea multiplicar una matriz A por un escalar, se escribe \\(escalar*A\\), en tanto que si se desea realizar una multiplicación matricial, la notación utilizada es %*%:\n\n\nA <- matrix(data = c(1,2,3,4), nrow = 2, byrow = TRUE)\nA\n\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n\nB <- matrix(data = c(1,2,3,4), nrow = 2, byrow = FALSE)\nB\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n# Multiplicación matricial\n\nC <- A%*%B\nC\n\n     [,1] [,2]\n[1,]    5   11\n[2,]   11   25\n\nTablas de datos (data frames)\nLos dataframes son una generalización del concepto de matriz. La regla de oro de los data frames es que las variables están dispuestas en columnas y las observaciones en filas. A su vez, las columnas pueden ser distintas estructuras de datos: vectores (numéricos o de caracteres) y factores, pero todos los datos contenidos en una misma columna, deben ser del mismo tipo. veamos con un ejemplo:\n\n\nestudiantes <- c(\"María\",\"Juan\",\"Carlos\",\"Rafael\",\"Emilia\",\n                 \"Ana\",\"Francisco\",\"Vanessa\")\nsexo <- factor(c(\"F\",\"M\",\"M\",\"M\",\"F\",\"F\",\"M\",\"F\"))\ntalla <- c(1.55,1.60,1.70,1.65,1.53,1.58,1.72,1.64)\ndatos <- data.frame(estudiantes, sexo,talla)\ndatos\n\n  estudiantes sexo talla\n1       María    F  1.55\n2        Juan    M  1.60\n3      Carlos    M  1.70\n4      Rafael    M  1.65\n5      Emilia    F  1.53\n6         Ana    F  1.58\n7   Francisco    M  1.72\n8     Vanessa    F  1.64\n\nSi por ejemplo se desea conocer la talla promedio y la desviación estándar de todos los estudiantes, se podría utilizar las funciones mean y sd:\n\n\n# Promedio de la talla\nmean(datos[,3])\n\n[1] 1.62125\n\n# Desviación estándar de la talla\nsd(datos[,3])\n\n[1] 0.06833479\n\nLa notación datos[,3] significa que del data frame datos, se está considerando para el cálculo todas las filas de la columna 3 exclusivamente.\nSin embargo, casi siempre interesa conocer la información contenida en sub.grupos que integran el data frame, como por ejemplo la talla promedio de los hombres y de las mujeres del grupo. Para ello, es muy útil el uso de la función tapply:\n\n\n# Uso de tapply\n\ntapply(datos$talla,datos$sexo,mean)\n\n     F      M \n1.5750 1.6675 \n\nEn un próximo tutorial trataremos la biblioteca dplyr, la cual permite explorar todas las posibilidades de manipulación de un data frame.\n\n\n\n",
    "preview": "lecciones_R/2023-07-01-estructuras-de-datos/estructuras-de-datos_files/figure-html5/unnamed-chunk-11-1.png",
    "last_modified": "2023-07-11T13:41:36-04:00",
    "input_file": {}
  }
]
